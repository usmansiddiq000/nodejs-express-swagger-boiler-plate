#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('cmtybknd:server');
 var http = require('http');
 const mongoose = require('mongoose');
 require('../src/modules/users/models/user.model');
 const User = mongoose.model('User');
 var socketio = require('socket.io');
 var path = require('path');
 var jwt = require('jsonwebtoken');
 var util = require('../global-utils');
 
 var sockets = util.getGlobbedPaths(util.assets.sockets);
 
 /**
  * Get port from environment and store in Express.
  */
 
 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  */
 
 var server = http.createServer(app);
 
 var io = socketio.listen(server)
 
 // Intercept Socket.io's handshake request
 io.use(async function (socket, next) {
   try {
     if (socket.handshake.query.token) {
       // if the user is authenticated
       const decoded = jwt.verify(socket.handshake.query.token, "help-community-secret");
       const user = await User.findById(decoded.id, '-password -salt');
       user.onlineStatus = {
         status: 'online'
       };
       await user.save();
       socket.request.user = user;
       next();
     } else {
       // anonymous user not allowed
       next(new Error('Please login to join'));
     }
 
 
   } catch (error) {
     next(error);
   }
 });
 
 // Add an event listener to the 'connection' event
 io.on('connection', function (socket) {
   sockets.forEach(_socket => {
     require(path.resolve(_socket))(io, socket);
   });
 });
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }
 