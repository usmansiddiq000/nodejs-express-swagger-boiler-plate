#!/usr/bin/env node
/* eslint-disable require-jsdoc */

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const mongoose = require('mongoose');
require('../src/modules/users/models/user.model');
const User = mongoose.model('User');
const socketio = require('socket.io');
const path = require('path');
const jwt = require('jsonwebtoken');
const util = require('../global-utils');
const fs = require('fs');
const publicKey = fs.readFileSync('./keys/public.key', 'utf8');

const sockets = util.getGlobbedPaths(util.assets.sockets);

/**
  * Get port from environment and store in Express.
  */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
  * Create HTTP server.
  */

const server = http.createServer(app);

const io = socketio.listen(server);

// Intercept Socket.io's handshake request
io.use(async function(socket, next) {
  try {
    if (socket.handshake.query.token) {
      // if the user is authenticated
      const decoded = jwt.verify(
          socket.handshake.query.token,
          publicKey,
      );
      const user = await User.findById(decoded.id, '-password -salt');
      user.onlineStatus = {
        status: 'online',
      };
      await user.save();
      socket.request.user = user;
      next();
    } else {
      // anonymous user not allowed
      next(new Error('Please login to join'));
    }
  } catch (error) {
    next(error);
  }
});

// Add an event listener to the 'connection' event
io.on('connection', function(socket) {
  sockets.forEach((_socket) => {
    require(path.resolve(_socket))(io, socket);
  });
});

/**
  * Listen on provided port, on all network interfaces.
  */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
  * Normalize a port into a number, string, or false.
  */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
  * Event listener for HTTP server "error" event.
  */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
     'Pipe ' + port :
     'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
  * Event listener for HTTP server "listening" event.
  */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
     'pipe ' + addr :
     'port ' + addr.port;
  debug('Listening on ' + bind);
}

